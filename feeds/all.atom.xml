<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>9bitbyte</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-11-27T15:54:00+11:00</updated><subtitle>coffee | code | solder</subtitle><entry><title>Life's Equilibrium</title><link href="/life-equilibrium.html" rel="alternate"></link><published>2017-11-27T15:54:00+11:00</published><updated>2017-11-27T15:54:00+11:00</updated><author><name>Thomas Crha</name></author><id>tag:None,2017-11-27:/life-equilibrium.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Freelancing for me fits directly into my current lifestyle, working environment and personality. I’ve been interested in Computing and Electronics since I was a young lad. I’ve been working from home for the past 2.5 years for a company called Appen. On top of that I’ve got 5+ years working experience within the Software Development and Hardware (makers) fields.&lt;/p&gt;
&lt;h3&gt;Python, Oh Python&lt;/h3&gt;

&lt;p&gt;The programming language I’m most familiar with is python (although I do use several other languages, this is what I use on a day-to-day basis). I love its flexibility, ‘batteries-included’ attitude and its vibrant and awesome community. The real power of python is in the additional libraries that have been created to handle a myriad of tasks. What am I familiar with other than the standard library; flask, requests, selenium, numpy, scipy, pandas, pyexcel, scrapy, pelican to name a few. &lt;/p&gt;
&lt;h3&gt;Making a Move&lt;/h3&gt;

&lt;p&gt;Working from home can and is challenging at times; and requires you to keep on top of the tasks you are currently attending to. It also provides you with a great deal of flexibility to pursue other tasks and activities whilst maintaining a full-time working schedule. I’ve not considered freelancing until recently – but due to the amount of extra time I have on a daily basis it seems a great fit with my current situation and &lt;a href="https://www.toptal.com/web"&gt;Toptal&lt;/a&gt; has some of the best resources and services when it comes to my needs – the partners and associates working with you guys is impressive. Other aspects that are also extremely positive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The resources and posts within your blog are great – I’ve just finished reading &lt;a href="https://www.toptal.com/machine-learning/tensorflow-python-tutorial"&gt;this&lt;/a&gt;. Which was fantastic.&lt;/li&gt;
&lt;li&gt;Your 3% philosophy – working with the best is something that I enjoy as well as thrive on. Having people challenge you to do better is a great motivation for me.&lt;/li&gt;
&lt;li&gt;Your industry presence and stature – you guys are major player in the Freelance industry and have a substantial amount of skilled people working for you and with you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Toptal+++&lt;/h3&gt;

&lt;p&gt;I believe that challenging projects are usually the most rewarding and fun! I’ve done my research and have found a lot of your competitors are providing short term, no frills contracts, that are generally very task driven and aren’t extremely original – these are fine and will pay the bills; but I want to get my teeth stuck into something more complex and interesting, something I believe &lt;a href="https://www.toptal.com/web"&gt;Toptal&lt;/a&gt; provides. &lt;a href="https://www.toptal.com/web"&gt;Toptal&lt;/a&gt;’s different Web developers Network's provide you with a wealth of experience and knowledge that I hope to tap into. The python Web developers Network you have is a great resource. &lt;a href="https://www.toptal.com/python"&gt;Python&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Pydirve Automated Authentication</title><link href="/pydirve-automated-authentication.html" rel="alternate"></link><published>2016-12-12T21:36:00+11:00</published><updated>2016-12-12T21:36:00+11:00</updated><author><name>Thomas Crha</name></author><id>tag:None,2016-12-12:/pydirve-automated-authentication.html</id><summary type="html"></summary><content type="html">&lt;p&gt;This seems to be something that is not clearly documented and can be frustrating to set up - especially when involving a crontab. The biggest problem is how the oauth scheme is defined by pydirve itself. It requires the user to have &lt;code&gt;client_secrets.json&lt;/code&gt; next to the script you are developing; or create a custom flow in code, which isn't the best practice&lt;/p&gt;
&lt;p&gt;The Pydirve module has a convenient way to create custom work flows without having it directly in code; making updates to credentials and keys easier. &lt;code&gt;settings.yaml&lt;/code&gt; is the mechanism used to create these custom authentication schemes. This file is fully outlined in &lt;a href="http://pythonhosted.org/PyDrive/oauth.html"&gt;this&lt;/a&gt; page. Before you can start defining your own oauth work-flow you'll need to download your &lt;code&gt;client_secrets.json&lt;/code&gt; from the &lt;a href="https://console.developers.google.com"&gt;Google API Console&lt;/a&gt;. The instructions for this are outlined within the Pydirve &lt;a href="" title="https://pythonhosted.org/PyDrive/quickstart.html"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;client_secrets.json&lt;/code&gt; contains several fields which are needed for the &lt;code&gt;settings.yaml&lt;/code&gt; file. Below is a copy of my &lt;code&gt;client_secrets.json&lt;/code&gt; file - with the sensitive data hashed out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;client_id&amp;quot;:&amp;quot;################.apps.googleusercontent.com&amp;quot;,
&amp;quot;project_id&amp;quot;:&amp;quot;YOUR_PROJECT_NAME&amp;quot;,
&amp;quot;auth_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/auth&amp;quot;,
&amp;quot;token_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;,
&amp;quot;auth_provider_x509_cert_url&amp;quot;:&amp;quot;https://www.googleapis.com/oauth2/v1/certs&amp;quot;,
&amp;quot;client_secret&amp;quot;:&amp;quot;#############&amp;quot;,
&amp;quot;redirect_uris&amp;quot;:[&amp;quot;http://localhost:8080/&amp;quot;],
&amp;quot;javascript_origins&amp;quot;:[&amp;quot;http://localhost:8080&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How Pydirve works out of the box is; you initialize the Class &lt;code&gt;GoogleAuth&lt;/code&gt; and then call the Class method &lt;code&gt;LocalWebserverAuth()&lt;/code&gt;. What this method does is call the &lt;code&gt;client_secrets.json&lt;/code&gt; file and uses it to determine the API endpoint you wish to access. It then starts a local browser session - using the settings provided in &lt;code&gt;client_secrets.json&lt;/code&gt; - which then requires the user to confirm the Google Account to be used and whether it can have permission to do so.&lt;/p&gt;
&lt;p&gt;What we need to do is automate this user interaction. To do so we need to save the credential/work-flow file produced during the call to &lt;code&gt;LocalWebserverAuth()&lt;/code&gt;. Pydrive has a method to do so. To save this file run the code snippet below, keeping note of the outputted file - the file produced is required to automate the oauth process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gauth = GoogleAuth()
gauth.LocalWebserverAuth()
gauth.SaveCredentialsFile(&amp;#39;./cred.json&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have our credential file, we can finally construct our &lt;code&gt;settings.yaml&lt;/code&gt; file. I used this sample provided on the &lt;a href="http://pythonhosted.org/PyDrive/oauth.html#sample-settings-yaml"&gt;PyDrive docs site&lt;/a&gt; to create mine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;settings.yaml
client_config_backend: settings
client_config:
   #make sure these match the client_secrets.json
   client_id: ###########################.apps.googleusercontent.com
   client_secret: #################
   auth_uri: https://accounts.google.com/o/oauth2/auth
   token_uri: https://accounts.google.com/o/oauth2/token
   redirect_uri: http://localhost:8080/ 

save_credentials: True  
save_credentials_backend: file  
save_credentials_file: /abs/path/to/pydrive-credentials.json

get_refresh_token: True

oauth_scope:
  - https://www.googleapis.com/auth/drive
  - https://www.googleapis.com/auth/drive.file
  - https://www.googleapis.com/auth/drive.install 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main points from this file are that the &lt;code&gt;client_config_backend&lt;/code&gt; is set to settings. This tells PyDrive to use the settings listed below; rather than using the &lt;code&gt;client_secrets.json&lt;/code&gt; file. If you set it to &lt;code&gt;file&lt;/code&gt; you can set the path of it via the &lt;code&gt;client_config_file&lt;/code&gt; setting. This method seems to cause a crontab problems; as the &lt;code&gt;client_config_file&lt;/code&gt; doesn't seem to be scope-able by the cron daemon - at least that's my experience. &lt;/p&gt;
&lt;p&gt;Now to use this oauth work flow simply issue this code - replacing &lt;code&gt;SETTINGS&lt;/code&gt; with your file ( be sure to make it an abs path).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gauth = GoogleAuth(SETTINGS)
gauth.LocalWebserverAuth()
drive = GoogleDrive(gauth)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you'll have a &lt;code&gt;Drive&lt;/code&gt; object ready to use and upload/manipulate files to your &lt;a href="http://drive.google.com"&gt;Google Drive&lt;/a&gt;!&lt;/p&gt;</content></entry></feed>